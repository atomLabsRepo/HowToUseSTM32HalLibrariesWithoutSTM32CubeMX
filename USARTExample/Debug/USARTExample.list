
USARTExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015fc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080017a4  080017a4  000117a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017c8  080017c8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080017c8  080017c8  000117c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080017d0  080017d0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017d0  080017d0  000117d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017d4  080017d4  000117d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080017d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000010  080017e8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  080017e8  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006caa  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011ce  00000000  00000000  00026cea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000580  00000000  00000000  00027eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004e8  00000000  00000000  00028438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001851  00000000  00000000  00028920  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000053db  00000000  00000000  0002a171  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bec54  00000000  00000000  0002f54c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee1a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001550  00000000  00000000  000ee21c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000010 	.word	0x20000010
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800178c 	.word	0x0800178c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000014 	.word	0x20000014
 80001e4:	0800178c 	.word	0x0800178c

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <__aeabi_uldivmod>:
 80001f8:	b953      	cbnz	r3, 8000210 <__aeabi_uldivmod+0x18>
 80001fa:	b94a      	cbnz	r2, 8000210 <__aeabi_uldivmod+0x18>
 80001fc:	2900      	cmp	r1, #0
 80001fe:	bf08      	it	eq
 8000200:	2800      	cmpeq	r0, #0
 8000202:	bf1c      	itt	ne
 8000204:	f04f 31ff 	movne.w	r1, #4294967295
 8000208:	f04f 30ff 	movne.w	r0, #4294967295
 800020c:	f000 b972 	b.w	80004f4 <__aeabi_idiv0>
 8000210:	f1ad 0c08 	sub.w	ip, sp, #8
 8000214:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000218:	f000 f806 	bl	8000228 <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4770      	bx	lr

08000228 <__udivmoddi4>:
 8000228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800022c:	9e08      	ldr	r6, [sp, #32]
 800022e:	4604      	mov	r4, r0
 8000230:	4688      	mov	r8, r1
 8000232:	2b00      	cmp	r3, #0
 8000234:	d14b      	bne.n	80002ce <__udivmoddi4+0xa6>
 8000236:	428a      	cmp	r2, r1
 8000238:	4615      	mov	r5, r2
 800023a:	d967      	bls.n	800030c <__udivmoddi4+0xe4>
 800023c:	fab2 f282 	clz	r2, r2
 8000240:	b14a      	cbz	r2, 8000256 <__udivmoddi4+0x2e>
 8000242:	f1c2 0720 	rsb	r7, r2, #32
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	fa20 f707 	lsr.w	r7, r0, r7
 800024e:	4095      	lsls	r5, r2
 8000250:	ea47 0803 	orr.w	r8, r7, r3
 8000254:	4094      	lsls	r4, r2
 8000256:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025a:	0c23      	lsrs	r3, r4, #16
 800025c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000260:	fa1f fc85 	uxth.w	ip, r5
 8000264:	fb0e 8817 	mls	r8, lr, r7, r8
 8000268:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800026c:	fb07 f10c 	mul.w	r1, r7, ip
 8000270:	4299      	cmp	r1, r3
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x60>
 8000274:	18eb      	adds	r3, r5, r3
 8000276:	f107 30ff 	add.w	r0, r7, #4294967295
 800027a:	f080 811b 	bcs.w	80004b4 <__udivmoddi4+0x28c>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 8118 	bls.w	80004b4 <__udivmoddi4+0x28c>
 8000284:	3f02      	subs	r7, #2
 8000286:	442b      	add	r3, r5
 8000288:	1a5b      	subs	r3, r3, r1
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000290:	fb0e 3310 	mls	r3, lr, r0, r3
 8000294:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000298:	fb00 fc0c 	mul.w	ip, r0, ip
 800029c:	45a4      	cmp	ip, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x8c>
 80002a0:	192c      	adds	r4, r5, r4
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a6:	f080 8107 	bcs.w	80004b8 <__udivmoddi4+0x290>
 80002aa:	45a4      	cmp	ip, r4
 80002ac:	f240 8104 	bls.w	80004b8 <__udivmoddi4+0x290>
 80002b0:	3802      	subs	r0, #2
 80002b2:	442c      	add	r4, r5
 80002b4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b8:	eba4 040c 	sub.w	r4, r4, ip
 80002bc:	2700      	movs	r7, #0
 80002be:	b11e      	cbz	r6, 80002c8 <__udivmoddi4+0xa0>
 80002c0:	40d4      	lsrs	r4, r2
 80002c2:	2300      	movs	r3, #0
 80002c4:	e9c6 4300 	strd	r4, r3, [r6]
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0xbe>
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	f000 80eb 	beq.w	80004ae <__udivmoddi4+0x286>
 80002d8:	2700      	movs	r7, #0
 80002da:	e9c6 0100 	strd	r0, r1, [r6]
 80002de:	4638      	mov	r0, r7
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	fab3 f783 	clz	r7, r3
 80002ea:	2f00      	cmp	r7, #0
 80002ec:	d147      	bne.n	800037e <__udivmoddi4+0x156>
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xd0>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2c4>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb61 0303 	sbc.w	r3, r1, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	4698      	mov	r8, r3
 8000302:	2e00      	cmp	r6, #0
 8000304:	d0e0      	beq.n	80002c8 <__udivmoddi4+0xa0>
 8000306:	e9c6 4800 	strd	r4, r8, [r6]
 800030a:	e7dd      	b.n	80002c8 <__udivmoddi4+0xa0>
 800030c:	b902      	cbnz	r2, 8000310 <__udivmoddi4+0xe8>
 800030e:	deff      	udf	#255	; 0xff
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	f040 808f 	bne.w	8000438 <__udivmoddi4+0x210>
 800031a:	1b49      	subs	r1, r1, r5
 800031c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000320:	fa1f f885 	uxth.w	r8, r5
 8000324:	2701      	movs	r7, #1
 8000326:	fbb1 fcfe 	udiv	ip, r1, lr
 800032a:	0c23      	lsrs	r3, r4, #16
 800032c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb08 f10c 	mul.w	r1, r8, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x124>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x122>
 8000344:	4299      	cmp	r1, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2bc>
 800034a:	4684      	mov	ip, r0
 800034c:	1a59      	subs	r1, r3, r1
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1410 	mls	r4, lr, r0, r1
 8000358:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x14c>
 8000364:	192c      	adds	r4, r5, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x14a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80b6 	bhi.w	80004de <__udivmoddi4+0x2b6>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e79f      	b.n	80002be <__udivmoddi4+0x96>
 800037e:	f1c7 0c20 	rsb	ip, r7, #32
 8000382:	40bb      	lsls	r3, r7
 8000384:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000388:	ea4e 0e03 	orr.w	lr, lr, r3
 800038c:	fa01 f407 	lsl.w	r4, r1, r7
 8000390:	fa20 f50c 	lsr.w	r5, r0, ip
 8000394:	fa21 f30c 	lsr.w	r3, r1, ip
 8000398:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800039c:	4325      	orrs	r5, r4
 800039e:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a2:	0c2c      	lsrs	r4, r5, #16
 80003a4:	fb08 3319 	mls	r3, r8, r9, r3
 80003a8:	fa1f fa8e 	uxth.w	sl, lr
 80003ac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b0:	fb09 f40a 	mul.w	r4, r9, sl
 80003b4:	429c      	cmp	r4, r3
 80003b6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ba:	fa00 f107 	lsl.w	r1, r0, r7
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b0>
 80003c0:	eb1e 0303 	adds.w	r3, lr, r3
 80003c4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c8:	f080 8087 	bcs.w	80004da <__udivmoddi4+0x2b2>
 80003cc:	429c      	cmp	r4, r3
 80003ce:	f240 8084 	bls.w	80004da <__udivmoddi4+0x2b2>
 80003d2:	f1a9 0902 	sub.w	r9, r9, #2
 80003d6:	4473      	add	r3, lr
 80003d8:	1b1b      	subs	r3, r3, r4
 80003da:	b2ad      	uxth	r5, r5
 80003dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e0:	fb08 3310 	mls	r3, r8, r0, r3
 80003e4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003ec:	45a2      	cmp	sl, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1da>
 80003f0:	eb1e 0404 	adds.w	r4, lr, r4
 80003f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f8:	d26b      	bcs.n	80004d2 <__udivmoddi4+0x2aa>
 80003fa:	45a2      	cmp	sl, r4
 80003fc:	d969      	bls.n	80004d2 <__udivmoddi4+0x2aa>
 80003fe:	3802      	subs	r0, #2
 8000400:	4474      	add	r4, lr
 8000402:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000406:	fba0 8902 	umull	r8, r9, r0, r2
 800040a:	eba4 040a 	sub.w	r4, r4, sl
 800040e:	454c      	cmp	r4, r9
 8000410:	46c2      	mov	sl, r8
 8000412:	464b      	mov	r3, r9
 8000414:	d354      	bcc.n	80004c0 <__udivmoddi4+0x298>
 8000416:	d051      	beq.n	80004bc <__udivmoddi4+0x294>
 8000418:	2e00      	cmp	r6, #0
 800041a:	d069      	beq.n	80004f0 <__udivmoddi4+0x2c8>
 800041c:	ebb1 050a 	subs.w	r5, r1, sl
 8000420:	eb64 0403 	sbc.w	r4, r4, r3
 8000424:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000428:	40fd      	lsrs	r5, r7
 800042a:	40fc      	lsrs	r4, r7
 800042c:	ea4c 0505 	orr.w	r5, ip, r5
 8000430:	e9c6 5400 	strd	r5, r4, [r6]
 8000434:	2700      	movs	r7, #0
 8000436:	e747      	b.n	80002c8 <__udivmoddi4+0xa0>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f703 	lsr.w	r7, r0, r3
 8000440:	4095      	lsls	r5, r2
 8000442:	fa01 f002 	lsl.w	r0, r1, r2
 8000446:	fa21 f303 	lsr.w	r3, r1, r3
 800044a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800044e:	4338      	orrs	r0, r7
 8000450:	0c01      	lsrs	r1, r0, #16
 8000452:	fbb3 f7fe 	udiv	r7, r3, lr
 8000456:	fa1f f885 	uxth.w	r8, r5
 800045a:	fb0e 3317 	mls	r3, lr, r7, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb07 f308 	mul.w	r3, r7, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x256>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f107 3cff 	add.w	ip, r7, #4294967295
 8000474:	d22f      	bcs.n	80004d6 <__udivmoddi4+0x2ae>
 8000476:	428b      	cmp	r3, r1
 8000478:	d92d      	bls.n	80004d6 <__udivmoddi4+0x2ae>
 800047a:	3f02      	subs	r7, #2
 800047c:	4429      	add	r1, r5
 800047e:	1acb      	subs	r3, r1, r3
 8000480:	b281      	uxth	r1, r0
 8000482:	fbb3 f0fe 	udiv	r0, r3, lr
 8000486:	fb0e 3310 	mls	r3, lr, r0, r3
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb00 f308 	mul.w	r3, r0, r8
 8000492:	428b      	cmp	r3, r1
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x27e>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f100 3cff 	add.w	ip, r0, #4294967295
 800049c:	d217      	bcs.n	80004ce <__udivmoddi4+0x2a6>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d915      	bls.n	80004ce <__udivmoddi4+0x2a6>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ac:	e73b      	b.n	8000326 <__udivmoddi4+0xfe>
 80004ae:	4637      	mov	r7, r6
 80004b0:	4630      	mov	r0, r6
 80004b2:	e709      	b.n	80002c8 <__udivmoddi4+0xa0>
 80004b4:	4607      	mov	r7, r0
 80004b6:	e6e7      	b.n	8000288 <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fb      	b.n	80002b4 <__udivmoddi4+0x8c>
 80004bc:	4541      	cmp	r1, r8
 80004be:	d2ab      	bcs.n	8000418 <__udivmoddi4+0x1f0>
 80004c0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c4:	eb69 020e 	sbc.w	r2, r9, lr
 80004c8:	3801      	subs	r0, #1
 80004ca:	4613      	mov	r3, r2
 80004cc:	e7a4      	b.n	8000418 <__udivmoddi4+0x1f0>
 80004ce:	4660      	mov	r0, ip
 80004d0:	e7e9      	b.n	80004a6 <__udivmoddi4+0x27e>
 80004d2:	4618      	mov	r0, r3
 80004d4:	e795      	b.n	8000402 <__udivmoddi4+0x1da>
 80004d6:	4667      	mov	r7, ip
 80004d8:	e7d1      	b.n	800047e <__udivmoddi4+0x256>
 80004da:	4681      	mov	r9, r0
 80004dc:	e77c      	b.n	80003d8 <__udivmoddi4+0x1b0>
 80004de:	3802      	subs	r0, #2
 80004e0:	442c      	add	r4, r5
 80004e2:	e747      	b.n	8000374 <__udivmoddi4+0x14c>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	442b      	add	r3, r5
 80004ea:	e72f      	b.n	800034c <__udivmoddi4+0x124>
 80004ec:	4638      	mov	r0, r7
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xda>
 80004f0:	4637      	mov	r7, r6
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0xa0>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004fc:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <HAL_Init+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <HAL_Init+0x40>)
 8000502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000506:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000508:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <HAL_Init+0x40>)
 800050e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000512:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a07      	ldr	r2, [pc, #28]	; (8000538 <HAL_Init+0x40>)
 800051a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800051e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000520:	2003      	movs	r0, #3
 8000522:	f000 f92b 	bl	800077c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000526:	200f      	movs	r0, #15
 8000528:	f000 f808 	bl	800053c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800052c:	f001 f840 	bl	80015b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000530:	2300      	movs	r3, #0
}
 8000532:	4618      	mov	r0, r3
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40023c00 	.word	0x40023c00

0800053c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <HAL_InitTick+0x54>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x58>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	4619      	mov	r1, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	fbb3 f3f1 	udiv	r3, r3, r1
 8000556:	fbb2 f3f3 	udiv	r3, r2, r3
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f943 	bl	80007e6 <HAL_SYSTICK_Config>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
 8000568:	e00e      	b.n	8000588 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b0f      	cmp	r3, #15
 800056e:	d80a      	bhi.n	8000586 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000570:	2200      	movs	r2, #0
 8000572:	6879      	ldr	r1, [r7, #4]
 8000574:	f04f 30ff 	mov.w	r0, #4294967295
 8000578:	f000 f90b 	bl	8000792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <HAL_InitTick+0x5c>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000582:	2300      	movs	r3, #0
 8000584:	e000      	b.n	8000588 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	2000000c 	.word	0x2000000c
 8000594:	20000004 	.word	0x20000004
 8000598:	20000000 	.word	0x20000000

0800059c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <HAL_IncTick+0x20>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x24>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4413      	add	r3, r2
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <HAL_IncTick+0x24>)
 80005ae:	6013      	str	r3, [r2, #0]
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000004 	.word	0x20000004
 80005c0:	2000002c 	.word	0x2000002c

080005c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  return uwTick;
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <HAL_GetTick+0x14>)
 80005ca:	681b      	ldr	r3, [r3, #0]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	2000002c 	.word	0x2000002c

080005dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <__NVIC_SetPriorityGrouping+0x44>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f2:	68ba      	ldr	r2, [r7, #8]
 80005f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005f8:	4013      	ands	r3, r2
 80005fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800060e:	4a04      	ldr	r2, [pc, #16]	; (8000620 <__NVIC_SetPriorityGrouping+0x44>)
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	60d3      	str	r3, [r2, #12]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <__NVIC_GetPriorityGrouping+0x18>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	0a1b      	lsrs	r3, r3, #8
 800062e:	f003 0307 	and.w	r3, r3, #7
}
 8000632:	4618      	mov	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	2b00      	cmp	r3, #0
 8000650:	db0b      	blt.n	800066a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	f003 021f 	and.w	r2, r3, #31
 8000658:	4907      	ldr	r1, [pc, #28]	; (8000678 <__NVIC_EnableIRQ+0x38>)
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	095b      	lsrs	r3, r3, #5
 8000660:	2001      	movs	r0, #1
 8000662:	fa00 f202 	lsl.w	r2, r0, r2
 8000666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000e100 	.word	0xe000e100

0800067c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	6039      	str	r1, [r7, #0]
 8000686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068c:	2b00      	cmp	r3, #0
 800068e:	db0a      	blt.n	80006a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	b2da      	uxtb	r2, r3
 8000694:	490c      	ldr	r1, [pc, #48]	; (80006c8 <__NVIC_SetPriority+0x4c>)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	0112      	lsls	r2, r2, #4
 800069c:	b2d2      	uxtb	r2, r2
 800069e:	440b      	add	r3, r1
 80006a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a4:	e00a      	b.n	80006bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4908      	ldr	r1, [pc, #32]	; (80006cc <__NVIC_SetPriority+0x50>)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	f003 030f 	and.w	r3, r3, #15
 80006b2:	3b04      	subs	r3, #4
 80006b4:	0112      	lsls	r2, r2, #4
 80006b6:	b2d2      	uxtb	r2, r2
 80006b8:	440b      	add	r3, r1
 80006ba:	761a      	strb	r2, [r3, #24]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000e100 	.word	0xe000e100
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b089      	sub	sp, #36	; 0x24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	f1c3 0307 	rsb	r3, r3, #7
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	bf28      	it	cs
 80006ee:	2304      	movcs	r3, #4
 80006f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	3304      	adds	r3, #4
 80006f6:	2b06      	cmp	r3, #6
 80006f8:	d902      	bls.n	8000700 <NVIC_EncodePriority+0x30>
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	3b03      	subs	r3, #3
 80006fe:	e000      	b.n	8000702 <NVIC_EncodePriority+0x32>
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	f04f 32ff 	mov.w	r2, #4294967295
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	fa02 f303 	lsl.w	r3, r2, r3
 800070e:	43da      	mvns	r2, r3
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	401a      	ands	r2, r3
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000718:	f04f 31ff 	mov.w	r1, #4294967295
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	43d9      	mvns	r1, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	4313      	orrs	r3, r2
         );
}
 800072a:	4618      	mov	r0, r3
 800072c:	3724      	adds	r7, #36	; 0x24
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
	...

08000738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000748:	d301      	bcc.n	800074e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800074a:	2301      	movs	r3, #1
 800074c:	e00f      	b.n	800076e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <SysTick_Config+0x40>)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000756:	210f      	movs	r1, #15
 8000758:	f04f 30ff 	mov.w	r0, #4294967295
 800075c:	f7ff ff8e 	bl	800067c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <SysTick_Config+0x40>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <SysTick_Config+0x40>)
 8000768:	2207      	movs	r2, #7
 800076a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	e000e010 	.word	0xe000e010

0800077c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ff29 	bl	80005dc <__NVIC_SetPriorityGrouping>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000792:	b580      	push	{r7, lr}
 8000794:	b086      	sub	sp, #24
 8000796:	af00      	add	r7, sp, #0
 8000798:	4603      	mov	r3, r0
 800079a:	60b9      	str	r1, [r7, #8]
 800079c:	607a      	str	r2, [r7, #4]
 800079e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007a4:	f7ff ff3e 	bl	8000624 <__NVIC_GetPriorityGrouping>
 80007a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	68b9      	ldr	r1, [r7, #8]
 80007ae:	6978      	ldr	r0, [r7, #20]
 80007b0:	f7ff ff8e 	bl	80006d0 <NVIC_EncodePriority>
 80007b4:	4602      	mov	r2, r0
 80007b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ba:	4611      	mov	r1, r2
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff5d 	bl	800067c <__NVIC_SetPriority>
}
 80007c2:	bf00      	nop
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff31 	bl	8000640 <__NVIC_EnableIRQ>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ffa2 	bl	8000738 <SysTick_Config>
 80007f4:	4603      	mov	r3, r0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000802:	f000 f802 	bl	800080a <HAL_SYSTICK_Callback>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000818:	b480      	push	{r7}
 800081a:	b089      	sub	sp, #36	; 0x24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
 8000832:	e16b      	b.n	8000b0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000834:	2201      	movs	r2, #1
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	697a      	ldr	r2, [r7, #20]
 8000844:	4013      	ands	r3, r2
 8000846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	429a      	cmp	r2, r3
 800084e:	f040 815a 	bne.w	8000b06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d00b      	beq.n	8000872 <HAL_GPIO_Init+0x5a>
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2b02      	cmp	r3, #2
 8000860:	d007      	beq.n	8000872 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000866:	2b11      	cmp	r3, #17
 8000868:	d003      	beq.n	8000872 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	2b12      	cmp	r3, #18
 8000870:	d130      	bne.n	80008d4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	2203      	movs	r2, #3
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43db      	mvns	r3, r3
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	4013      	ands	r3, r2
 8000888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	68da      	ldr	r2, [r3, #12]
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	4313      	orrs	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008a8:	2201      	movs	r2, #1
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	43db      	mvns	r3, r3
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	4013      	ands	r3, r2
 80008b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	091b      	lsrs	r3, r3, #4
 80008be:	f003 0201 	and.w	r2, r3, #1
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	69ba      	ldr	r2, [r7, #24]
 80008d2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	2203      	movs	r2, #3
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	43db      	mvns	r3, r3
 80008e6:	69ba      	ldr	r2, [r7, #24]
 80008e8:	4013      	ands	r3, r2
 80008ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	689a      	ldr	r2, [r3, #8]
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d003      	beq.n	8000914 <HAL_GPIO_Init+0xfc>
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b12      	cmp	r3, #18
 8000912:	d123      	bne.n	800095c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	08da      	lsrs	r2, r3, #3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3208      	adds	r2, #8
 800091c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000920:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	f003 0307 	and.w	r3, r3, #7
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	220f      	movs	r2, #15
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	43db      	mvns	r3, r3
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	4013      	ands	r3, r2
 8000936:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	691a      	ldr	r2, [r3, #16]
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	4313      	orrs	r3, r2
 800094c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	08da      	lsrs	r2, r3, #3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3208      	adds	r2, #8
 8000956:	69b9      	ldr	r1, [r7, #24]
 8000958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	2203      	movs	r2, #3
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	4013      	ands	r3, r2
 8000972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f003 0203 	and.w	r2, r3, #3
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	4313      	orrs	r3, r2
 8000988:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000998:	2b00      	cmp	r3, #0
 800099a:	f000 80b4 	beq.w	8000b06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4b5f      	ldr	r3, [pc, #380]	; (8000b20 <HAL_GPIO_Init+0x308>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a5e      	ldr	r2, [pc, #376]	; (8000b20 <HAL_GPIO_Init+0x308>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b5c      	ldr	r3, [pc, #368]	; (8000b20 <HAL_GPIO_Init+0x308>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009ba:	4a5a      	ldr	r2, [pc, #360]	; (8000b24 <HAL_GPIO_Init+0x30c>)
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	089b      	lsrs	r3, r3, #2
 80009c0:	3302      	adds	r3, #2
 80009c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	f003 0303 	and.w	r3, r3, #3
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	220f      	movs	r2, #15
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	4013      	ands	r3, r2
 80009dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a51      	ldr	r2, [pc, #324]	; (8000b28 <HAL_GPIO_Init+0x310>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d02b      	beq.n	8000a3e <HAL_GPIO_Init+0x226>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a50      	ldr	r2, [pc, #320]	; (8000b2c <HAL_GPIO_Init+0x314>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d025      	beq.n	8000a3a <HAL_GPIO_Init+0x222>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a4f      	ldr	r2, [pc, #316]	; (8000b30 <HAL_GPIO_Init+0x318>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d01f      	beq.n	8000a36 <HAL_GPIO_Init+0x21e>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a4e      	ldr	r2, [pc, #312]	; (8000b34 <HAL_GPIO_Init+0x31c>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d019      	beq.n	8000a32 <HAL_GPIO_Init+0x21a>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a4d      	ldr	r2, [pc, #308]	; (8000b38 <HAL_GPIO_Init+0x320>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d013      	beq.n	8000a2e <HAL_GPIO_Init+0x216>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a4c      	ldr	r2, [pc, #304]	; (8000b3c <HAL_GPIO_Init+0x324>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d00d      	beq.n	8000a2a <HAL_GPIO_Init+0x212>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a4b      	ldr	r2, [pc, #300]	; (8000b40 <HAL_GPIO_Init+0x328>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d007      	beq.n	8000a26 <HAL_GPIO_Init+0x20e>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a4a      	ldr	r2, [pc, #296]	; (8000b44 <HAL_GPIO_Init+0x32c>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d101      	bne.n	8000a22 <HAL_GPIO_Init+0x20a>
 8000a1e:	2307      	movs	r3, #7
 8000a20:	e00e      	b.n	8000a40 <HAL_GPIO_Init+0x228>
 8000a22:	2308      	movs	r3, #8
 8000a24:	e00c      	b.n	8000a40 <HAL_GPIO_Init+0x228>
 8000a26:	2306      	movs	r3, #6
 8000a28:	e00a      	b.n	8000a40 <HAL_GPIO_Init+0x228>
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	e008      	b.n	8000a40 <HAL_GPIO_Init+0x228>
 8000a2e:	2304      	movs	r3, #4
 8000a30:	e006      	b.n	8000a40 <HAL_GPIO_Init+0x228>
 8000a32:	2303      	movs	r3, #3
 8000a34:	e004      	b.n	8000a40 <HAL_GPIO_Init+0x228>
 8000a36:	2302      	movs	r3, #2
 8000a38:	e002      	b.n	8000a40 <HAL_GPIO_Init+0x228>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e000      	b.n	8000a40 <HAL_GPIO_Init+0x228>
 8000a3e:	2300      	movs	r3, #0
 8000a40:	69fa      	ldr	r2, [r7, #28]
 8000a42:	f002 0203 	and.w	r2, r2, #3
 8000a46:	0092      	lsls	r2, r2, #2
 8000a48:	4093      	lsls	r3, r2
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a50:	4934      	ldr	r1, [pc, #208]	; (8000b24 <HAL_GPIO_Init+0x30c>)
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	089b      	lsrs	r3, r3, #2
 8000a56:	3302      	adds	r3, #2
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a5e:	4b3a      	ldr	r3, [pc, #232]	; (8000b48 <HAL_GPIO_Init+0x330>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	43db      	mvns	r3, r3
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d003      	beq.n	8000a82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a82:	4a31      	ldr	r2, [pc, #196]	; (8000b48 <HAL_GPIO_Init+0x330>)
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a88:	4b2f      	ldr	r3, [pc, #188]	; (8000b48 <HAL_GPIO_Init+0x330>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	43db      	mvns	r3, r3
 8000a92:	69ba      	ldr	r2, [r7, #24]
 8000a94:	4013      	ands	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aac:	4a26      	ldr	r2, [pc, #152]	; (8000b48 <HAL_GPIO_Init+0x330>)
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ab2:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <HAL_GPIO_Init+0x330>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	43db      	mvns	r3, r3
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ad6:	4a1c      	ldr	r2, [pc, #112]	; (8000b48 <HAL_GPIO_Init+0x330>)
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <HAL_GPIO_Init+0x330>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	69ba      	ldr	r2, [r7, #24]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000af8:	69ba      	ldr	r2, [r7, #24]
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b00:	4a11      	ldr	r2, [pc, #68]	; (8000b48 <HAL_GPIO_Init+0x330>)
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	61fb      	str	r3, [r7, #28]
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	2b0f      	cmp	r3, #15
 8000b10:	f67f ae90 	bls.w	8000834 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b14:	bf00      	nop
 8000b16:	3724      	adds	r7, #36	; 0x24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40013800 	.word	0x40013800
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	40020400 	.word	0x40020400
 8000b30:	40020800 	.word	0x40020800
 8000b34:	40020c00 	.word	0x40020c00
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40021400 	.word	0x40021400
 8000b40:	40021800 	.word	0x40021800
 8000b44:	40021c00 	.word	0x40021c00
 8000b48:	40013c00 	.word	0x40013c00

08000b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	2000000c 	.word	0x2000000c

08000b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000b68:	f7ff fff0 	bl	8000b4c <HAL_RCC_GetHCLKFreq>
 8000b6c:	4601      	mov	r1, r0
 8000b6e:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	0a9b      	lsrs	r3, r3, #10
 8000b74:	f003 0307 	and.w	r3, r3, #7
 8000b78:	4a03      	ldr	r2, [pc, #12]	; (8000b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000b7a:	5cd3      	ldrb	r3, [r2, r3]
 8000b7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	080017c0 	.word	0x080017c0

08000b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000b90:	f7ff ffdc 	bl	8000b4c <HAL_RCC_GetHCLKFreq>
 8000b94:	4601      	mov	r1, r0
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	0b5b      	lsrs	r3, r3, #13
 8000b9c:	f003 0307 	and.w	r3, r3, #7
 8000ba0:	4a03      	ldr	r2, [pc, #12]	; (8000bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000ba2:	5cd3      	ldrb	r3, [r2, r3]
 8000ba4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	080017c0 	.word	0x080017c0

08000bb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e03f      	b.n	8000c46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d106      	bne.n	8000be0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f000 fd0a 	bl	80015f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2224      	movs	r2, #36	; 0x24
 8000be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	68da      	ldr	r2, [r3, #12]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000bf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f000 f90b 	bl	8000e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	691a      	ldr	r2, [r3, #16]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000c0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	695a      	ldr	r2, [r3, #20]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000c1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	68da      	ldr	r2, [r3, #12]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2220      	movs	r2, #32
 8000c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2220      	movs	r2, #32
 8000c40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b088      	sub	sp, #32
 8000c52:	af02      	add	r7, sp, #8
 8000c54:	60f8      	str	r0, [r7, #12]
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b20      	cmp	r3, #32
 8000c6c:	f040 8083 	bne.w	8000d76 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <HAL_UART_Transmit+0x2e>
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d101      	bne.n	8000c80 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e07b      	b.n	8000d78 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d101      	bne.n	8000c8e <HAL_UART_Transmit+0x40>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	e074      	b.n	8000d78 <HAL_UART_Transmit+0x12a>
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2201      	movs	r2, #1
 8000c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2221      	movs	r2, #33	; 0x21
 8000ca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000ca4:	f7ff fc8e 	bl	80005c4 <HAL_GetTick>
 8000ca8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	88fa      	ldrh	r2, [r7, #6]
 8000cae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	88fa      	ldrh	r2, [r7, #6]
 8000cb4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8000cbe:	e042      	b.n	8000d46 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cd6:	d122      	bne.n	8000d1e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2180      	movs	r1, #128	; 0x80
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f000 f84c 	bl	8000d80 <UART_WaitOnFlagUntilTimeout>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e042      	b.n	8000d78 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d04:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d103      	bne.n	8000d16 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	3302      	adds	r3, #2
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	e017      	b.n	8000d46 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	e013      	b.n	8000d46 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	2200      	movs	r2, #0
 8000d26:	2180      	movs	r1, #128	; 0x80
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f000 f829 	bl	8000d80 <UART_WaitOnFlagUntilTimeout>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8000d34:	2303      	movs	r3, #3
 8000d36:	e01f      	b.n	8000d78 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	60ba      	str	r2, [r7, #8]
 8000d3e:	781a      	ldrb	r2, [r3, #0]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1b7      	bne.n	8000cc0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	2200      	movs	r2, #0
 8000d58:	2140      	movs	r1, #64	; 0x40
 8000d5a:	68f8      	ldr	r0, [r7, #12]
 8000d5c:	f000 f810 	bl	8000d80 <UART_WaitOnFlagUntilTimeout>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e006      	b.n	8000d78 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e000      	b.n	8000d78 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8000d76:	2302      	movs	r3, #2
  }
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000d90:	e02c      	b.n	8000dec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d98:	d028      	beq.n	8000dec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d007      	beq.n	8000db0 <UART_WaitOnFlagUntilTimeout+0x30>
 8000da0:	f7ff fc10 	bl	80005c4 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d21d      	bcs.n	8000dec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000dbe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	695a      	ldr	r2, [r3, #20]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f022 0201 	bic.w	r2, r2, #1
 8000dce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2220      	movs	r2, #32
 8000dd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2220      	movs	r2, #32
 8000ddc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e00f      	b.n	8000e0c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	4013      	ands	r3, r2
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	bf0c      	ite	eq
 8000dfc:	2301      	moveq	r3, #1
 8000dfe:	2300      	movne	r3, #0
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	461a      	mov	r2, r3
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d0c3      	beq.n	8000d92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e18:	b085      	sub	sp, #20
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	431a      	orrs	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8000e56:	f023 030c 	bic.w	r3, r3, #12
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	6812      	ldr	r2, [r2, #0]
 8000e5e:	68f9      	ldr	r1, [r7, #12]
 8000e60:	430b      	orrs	r3, r1
 8000e62:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	699a      	ldr	r2, [r3, #24]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	430a      	orrs	r2, r1
 8000e78:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e82:	f040 818b 	bne.w	800119c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4ac1      	ldr	r2, [pc, #772]	; (8001190 <UART_SetConfig+0x37c>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d005      	beq.n	8000e9c <UART_SetConfig+0x88>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4abf      	ldr	r2, [pc, #764]	; (8001194 <UART_SetConfig+0x380>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	f040 80bd 	bne.w	8001016 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000e9c:	f7ff fe76 	bl	8000b8c <HAL_RCC_GetPCLK2Freq>
 8000ea0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	461d      	mov	r5, r3
 8000ea6:	f04f 0600 	mov.w	r6, #0
 8000eaa:	46a8      	mov	r8, r5
 8000eac:	46b1      	mov	r9, r6
 8000eae:	eb18 0308 	adds.w	r3, r8, r8
 8000eb2:	eb49 0409 	adc.w	r4, r9, r9
 8000eb6:	4698      	mov	r8, r3
 8000eb8:	46a1      	mov	r9, r4
 8000eba:	eb18 0805 	adds.w	r8, r8, r5
 8000ebe:	eb49 0906 	adc.w	r9, r9, r6
 8000ec2:	f04f 0100 	mov.w	r1, #0
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8000ece:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8000ed2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8000ed6:	4688      	mov	r8, r1
 8000ed8:	4691      	mov	r9, r2
 8000eda:	eb18 0005 	adds.w	r0, r8, r5
 8000ede:	eb49 0106 	adc.w	r1, r9, r6
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	461d      	mov	r5, r3
 8000ee8:	f04f 0600 	mov.w	r6, #0
 8000eec:	196b      	adds	r3, r5, r5
 8000eee:	eb46 0406 	adc.w	r4, r6, r6
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	f7ff f97f 	bl	80001f8 <__aeabi_uldivmod>
 8000efa:	4603      	mov	r3, r0
 8000efc:	460c      	mov	r4, r1
 8000efe:	461a      	mov	r2, r3
 8000f00:	4ba5      	ldr	r3, [pc, #660]	; (8001198 <UART_SetConfig+0x384>)
 8000f02:	fba3 2302 	umull	r2, r3, r3, r2
 8000f06:	095b      	lsrs	r3, r3, #5
 8000f08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	461d      	mov	r5, r3
 8000f10:	f04f 0600 	mov.w	r6, #0
 8000f14:	46a9      	mov	r9, r5
 8000f16:	46b2      	mov	sl, r6
 8000f18:	eb19 0309 	adds.w	r3, r9, r9
 8000f1c:	eb4a 040a 	adc.w	r4, sl, sl
 8000f20:	4699      	mov	r9, r3
 8000f22:	46a2      	mov	sl, r4
 8000f24:	eb19 0905 	adds.w	r9, r9, r5
 8000f28:	eb4a 0a06 	adc.w	sl, sl, r6
 8000f2c:	f04f 0100 	mov.w	r1, #0
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000f38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8000f3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8000f40:	4689      	mov	r9, r1
 8000f42:	4692      	mov	sl, r2
 8000f44:	eb19 0005 	adds.w	r0, r9, r5
 8000f48:	eb4a 0106 	adc.w	r1, sl, r6
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	461d      	mov	r5, r3
 8000f52:	f04f 0600 	mov.w	r6, #0
 8000f56:	196b      	adds	r3, r5, r5
 8000f58:	eb46 0406 	adc.w	r4, r6, r6
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4623      	mov	r3, r4
 8000f60:	f7ff f94a 	bl	80001f8 <__aeabi_uldivmod>
 8000f64:	4603      	mov	r3, r0
 8000f66:	460c      	mov	r4, r1
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b8b      	ldr	r3, [pc, #556]	; (8001198 <UART_SetConfig+0x384>)
 8000f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8000f70:	095b      	lsrs	r3, r3, #5
 8000f72:	2164      	movs	r1, #100	; 0x64
 8000f74:	fb01 f303 	mul.w	r3, r1, r3
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	3332      	adds	r3, #50	; 0x32
 8000f7e:	4a86      	ldr	r2, [pc, #536]	; (8001198 <UART_SetConfig+0x384>)
 8000f80:	fba2 2303 	umull	r2, r3, r2, r3
 8000f84:	095b      	lsrs	r3, r3, #5
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000f8c:	4498      	add	r8, r3
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	461d      	mov	r5, r3
 8000f92:	f04f 0600 	mov.w	r6, #0
 8000f96:	46a9      	mov	r9, r5
 8000f98:	46b2      	mov	sl, r6
 8000f9a:	eb19 0309 	adds.w	r3, r9, r9
 8000f9e:	eb4a 040a 	adc.w	r4, sl, sl
 8000fa2:	4699      	mov	r9, r3
 8000fa4:	46a2      	mov	sl, r4
 8000fa6:	eb19 0905 	adds.w	r9, r9, r5
 8000faa:	eb4a 0a06 	adc.w	sl, sl, r6
 8000fae:	f04f 0100 	mov.w	r1, #0
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000fba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8000fbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8000fc2:	4689      	mov	r9, r1
 8000fc4:	4692      	mov	sl, r2
 8000fc6:	eb19 0005 	adds.w	r0, r9, r5
 8000fca:	eb4a 0106 	adc.w	r1, sl, r6
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	461d      	mov	r5, r3
 8000fd4:	f04f 0600 	mov.w	r6, #0
 8000fd8:	196b      	adds	r3, r5, r5
 8000fda:	eb46 0406 	adc.w	r4, r6, r6
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4623      	mov	r3, r4
 8000fe2:	f7ff f909 	bl	80001f8 <__aeabi_uldivmod>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460c      	mov	r4, r1
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b6a      	ldr	r3, [pc, #424]	; (8001198 <UART_SetConfig+0x384>)
 8000fee:	fba3 1302 	umull	r1, r3, r3, r2
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2164      	movs	r1, #100	; 0x64
 8000ff6:	fb01 f303 	mul.w	r3, r1, r3
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	3332      	adds	r3, #50	; 0x32
 8001000:	4a65      	ldr	r2, [pc, #404]	; (8001198 <UART_SetConfig+0x384>)
 8001002:	fba2 2303 	umull	r2, r3, r2, r3
 8001006:	095b      	lsrs	r3, r3, #5
 8001008:	f003 0207 	and.w	r2, r3, #7
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4442      	add	r2, r8
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	e26f      	b.n	80014f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001016:	f7ff fda5 	bl	8000b64 <HAL_RCC_GetPCLK1Freq>
 800101a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	461d      	mov	r5, r3
 8001020:	f04f 0600 	mov.w	r6, #0
 8001024:	46a8      	mov	r8, r5
 8001026:	46b1      	mov	r9, r6
 8001028:	eb18 0308 	adds.w	r3, r8, r8
 800102c:	eb49 0409 	adc.w	r4, r9, r9
 8001030:	4698      	mov	r8, r3
 8001032:	46a1      	mov	r9, r4
 8001034:	eb18 0805 	adds.w	r8, r8, r5
 8001038:	eb49 0906 	adc.w	r9, r9, r6
 800103c:	f04f 0100 	mov.w	r1, #0
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001048:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800104c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001050:	4688      	mov	r8, r1
 8001052:	4691      	mov	r9, r2
 8001054:	eb18 0005 	adds.w	r0, r8, r5
 8001058:	eb49 0106 	adc.w	r1, r9, r6
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	461d      	mov	r5, r3
 8001062:	f04f 0600 	mov.w	r6, #0
 8001066:	196b      	adds	r3, r5, r5
 8001068:	eb46 0406 	adc.w	r4, r6, r6
 800106c:	461a      	mov	r2, r3
 800106e:	4623      	mov	r3, r4
 8001070:	f7ff f8c2 	bl	80001f8 <__aeabi_uldivmod>
 8001074:	4603      	mov	r3, r0
 8001076:	460c      	mov	r4, r1
 8001078:	461a      	mov	r2, r3
 800107a:	4b47      	ldr	r3, [pc, #284]	; (8001198 <UART_SetConfig+0x384>)
 800107c:	fba3 2302 	umull	r2, r3, r3, r2
 8001080:	095b      	lsrs	r3, r3, #5
 8001082:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	461d      	mov	r5, r3
 800108a:	f04f 0600 	mov.w	r6, #0
 800108e:	46a9      	mov	r9, r5
 8001090:	46b2      	mov	sl, r6
 8001092:	eb19 0309 	adds.w	r3, r9, r9
 8001096:	eb4a 040a 	adc.w	r4, sl, sl
 800109a:	4699      	mov	r9, r3
 800109c:	46a2      	mov	sl, r4
 800109e:	eb19 0905 	adds.w	r9, r9, r5
 80010a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80010a6:	f04f 0100 	mov.w	r1, #0
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80010b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80010b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80010ba:	4689      	mov	r9, r1
 80010bc:	4692      	mov	sl, r2
 80010be:	eb19 0005 	adds.w	r0, r9, r5
 80010c2:	eb4a 0106 	adc.w	r1, sl, r6
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	461d      	mov	r5, r3
 80010cc:	f04f 0600 	mov.w	r6, #0
 80010d0:	196b      	adds	r3, r5, r5
 80010d2:	eb46 0406 	adc.w	r4, r6, r6
 80010d6:	461a      	mov	r2, r3
 80010d8:	4623      	mov	r3, r4
 80010da:	f7ff f88d 	bl	80001f8 <__aeabi_uldivmod>
 80010de:	4603      	mov	r3, r0
 80010e0:	460c      	mov	r4, r1
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <UART_SetConfig+0x384>)
 80010e6:	fba3 1302 	umull	r1, r3, r3, r2
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	2164      	movs	r1, #100	; 0x64
 80010ee:	fb01 f303 	mul.w	r3, r1, r3
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	3332      	adds	r3, #50	; 0x32
 80010f8:	4a27      	ldr	r2, [pc, #156]	; (8001198 <UART_SetConfig+0x384>)
 80010fa:	fba2 2303 	umull	r2, r3, r2, r3
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001106:	4498      	add	r8, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	461d      	mov	r5, r3
 800110c:	f04f 0600 	mov.w	r6, #0
 8001110:	46a9      	mov	r9, r5
 8001112:	46b2      	mov	sl, r6
 8001114:	eb19 0309 	adds.w	r3, r9, r9
 8001118:	eb4a 040a 	adc.w	r4, sl, sl
 800111c:	4699      	mov	r9, r3
 800111e:	46a2      	mov	sl, r4
 8001120:	eb19 0905 	adds.w	r9, r9, r5
 8001124:	eb4a 0a06 	adc.w	sl, sl, r6
 8001128:	f04f 0100 	mov.w	r1, #0
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001134:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001138:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800113c:	4689      	mov	r9, r1
 800113e:	4692      	mov	sl, r2
 8001140:	eb19 0005 	adds.w	r0, r9, r5
 8001144:	eb4a 0106 	adc.w	r1, sl, r6
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	461d      	mov	r5, r3
 800114e:	f04f 0600 	mov.w	r6, #0
 8001152:	196b      	adds	r3, r5, r5
 8001154:	eb46 0406 	adc.w	r4, r6, r6
 8001158:	461a      	mov	r2, r3
 800115a:	4623      	mov	r3, r4
 800115c:	f7ff f84c 	bl	80001f8 <__aeabi_uldivmod>
 8001160:	4603      	mov	r3, r0
 8001162:	460c      	mov	r4, r1
 8001164:	461a      	mov	r2, r3
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <UART_SetConfig+0x384>)
 8001168:	fba3 1302 	umull	r1, r3, r3, r2
 800116c:	095b      	lsrs	r3, r3, #5
 800116e:	2164      	movs	r1, #100	; 0x64
 8001170:	fb01 f303 	mul.w	r3, r1, r3
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	3332      	adds	r3, #50	; 0x32
 800117a:	4a07      	ldr	r2, [pc, #28]	; (8001198 <UART_SetConfig+0x384>)
 800117c:	fba2 2303 	umull	r2, r3, r2, r3
 8001180:	095b      	lsrs	r3, r3, #5
 8001182:	f003 0207 	and.w	r2, r3, #7
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4442      	add	r2, r8
 800118c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800118e:	e1b2      	b.n	80014f6 <UART_SetConfig+0x6e2>
 8001190:	40011000 	.word	0x40011000
 8001194:	40011400 	.word	0x40011400
 8001198:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4ad7      	ldr	r2, [pc, #860]	; (8001500 <UART_SetConfig+0x6ec>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d005      	beq.n	80011b2 <UART_SetConfig+0x39e>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4ad6      	ldr	r2, [pc, #856]	; (8001504 <UART_SetConfig+0x6f0>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	f040 80d1 	bne.w	8001354 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80011b2:	f7ff fceb 	bl	8000b8c <HAL_RCC_GetPCLK2Freq>
 80011b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	469a      	mov	sl, r3
 80011bc:	f04f 0b00 	mov.w	fp, #0
 80011c0:	46d0      	mov	r8, sl
 80011c2:	46d9      	mov	r9, fp
 80011c4:	eb18 0308 	adds.w	r3, r8, r8
 80011c8:	eb49 0409 	adc.w	r4, r9, r9
 80011cc:	4698      	mov	r8, r3
 80011ce:	46a1      	mov	r9, r4
 80011d0:	eb18 080a 	adds.w	r8, r8, sl
 80011d4:	eb49 090b 	adc.w	r9, r9, fp
 80011d8:	f04f 0100 	mov.w	r1, #0
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80011e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80011e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80011ec:	4688      	mov	r8, r1
 80011ee:	4691      	mov	r9, r2
 80011f0:	eb1a 0508 	adds.w	r5, sl, r8
 80011f4:	eb4b 0609 	adc.w	r6, fp, r9
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	f04f 0400 	mov.w	r4, #0
 800120a:	0094      	lsls	r4, r2, #2
 800120c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001210:	008b      	lsls	r3, r1, #2
 8001212:	461a      	mov	r2, r3
 8001214:	4623      	mov	r3, r4
 8001216:	4628      	mov	r0, r5
 8001218:	4631      	mov	r1, r6
 800121a:	f7fe ffed 	bl	80001f8 <__aeabi_uldivmod>
 800121e:	4603      	mov	r3, r0
 8001220:	460c      	mov	r4, r1
 8001222:	461a      	mov	r2, r3
 8001224:	4bb8      	ldr	r3, [pc, #736]	; (8001508 <UART_SetConfig+0x6f4>)
 8001226:	fba3 2302 	umull	r2, r3, r3, r2
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	469b      	mov	fp, r3
 8001234:	f04f 0c00 	mov.w	ip, #0
 8001238:	46d9      	mov	r9, fp
 800123a:	46e2      	mov	sl, ip
 800123c:	eb19 0309 	adds.w	r3, r9, r9
 8001240:	eb4a 040a 	adc.w	r4, sl, sl
 8001244:	4699      	mov	r9, r3
 8001246:	46a2      	mov	sl, r4
 8001248:	eb19 090b 	adds.w	r9, r9, fp
 800124c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001250:	f04f 0100 	mov.w	r1, #0
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800125c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001260:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001264:	4689      	mov	r9, r1
 8001266:	4692      	mov	sl, r2
 8001268:	eb1b 0509 	adds.w	r5, fp, r9
 800126c:	eb4c 060a 	adc.w	r6, ip, sl
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4619      	mov	r1, r3
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	f04f 0400 	mov.w	r4, #0
 8001282:	0094      	lsls	r4, r2, #2
 8001284:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001288:	008b      	lsls	r3, r1, #2
 800128a:	461a      	mov	r2, r3
 800128c:	4623      	mov	r3, r4
 800128e:	4628      	mov	r0, r5
 8001290:	4631      	mov	r1, r6
 8001292:	f7fe ffb1 	bl	80001f8 <__aeabi_uldivmod>
 8001296:	4603      	mov	r3, r0
 8001298:	460c      	mov	r4, r1
 800129a:	461a      	mov	r2, r3
 800129c:	4b9a      	ldr	r3, [pc, #616]	; (8001508 <UART_SetConfig+0x6f4>)
 800129e:	fba3 1302 	umull	r1, r3, r3, r2
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	2164      	movs	r1, #100	; 0x64
 80012a6:	fb01 f303 	mul.w	r3, r1, r3
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	3332      	adds	r3, #50	; 0x32
 80012b0:	4a95      	ldr	r2, [pc, #596]	; (8001508 <UART_SetConfig+0x6f4>)
 80012b2:	fba2 2303 	umull	r2, r3, r2, r3
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012bc:	4498      	add	r8, r3
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	469b      	mov	fp, r3
 80012c2:	f04f 0c00 	mov.w	ip, #0
 80012c6:	46d9      	mov	r9, fp
 80012c8:	46e2      	mov	sl, ip
 80012ca:	eb19 0309 	adds.w	r3, r9, r9
 80012ce:	eb4a 040a 	adc.w	r4, sl, sl
 80012d2:	4699      	mov	r9, r3
 80012d4:	46a2      	mov	sl, r4
 80012d6:	eb19 090b 	adds.w	r9, r9, fp
 80012da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80012de:	f04f 0100 	mov.w	r1, #0
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80012ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80012ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80012f2:	4689      	mov	r9, r1
 80012f4:	4692      	mov	sl, r2
 80012f6:	eb1b 0509 	adds.w	r5, fp, r9
 80012fa:	eb4c 060a 	adc.w	r6, ip, sl
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	f04f 0400 	mov.w	r4, #0
 8001310:	0094      	lsls	r4, r2, #2
 8001312:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001316:	008b      	lsls	r3, r1, #2
 8001318:	461a      	mov	r2, r3
 800131a:	4623      	mov	r3, r4
 800131c:	4628      	mov	r0, r5
 800131e:	4631      	mov	r1, r6
 8001320:	f7fe ff6a 	bl	80001f8 <__aeabi_uldivmod>
 8001324:	4603      	mov	r3, r0
 8001326:	460c      	mov	r4, r1
 8001328:	461a      	mov	r2, r3
 800132a:	4b77      	ldr	r3, [pc, #476]	; (8001508 <UART_SetConfig+0x6f4>)
 800132c:	fba3 1302 	umull	r1, r3, r3, r2
 8001330:	095b      	lsrs	r3, r3, #5
 8001332:	2164      	movs	r1, #100	; 0x64
 8001334:	fb01 f303 	mul.w	r3, r1, r3
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	3332      	adds	r3, #50	; 0x32
 800133e:	4a72      	ldr	r2, [pc, #456]	; (8001508 <UART_SetConfig+0x6f4>)
 8001340:	fba2 2303 	umull	r2, r3, r2, r3
 8001344:	095b      	lsrs	r3, r3, #5
 8001346:	f003 020f 	and.w	r2, r3, #15
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4442      	add	r2, r8
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	e0d0      	b.n	80014f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001354:	f7ff fc06 	bl	8000b64 <HAL_RCC_GetPCLK1Freq>
 8001358:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	469a      	mov	sl, r3
 800135e:	f04f 0b00 	mov.w	fp, #0
 8001362:	46d0      	mov	r8, sl
 8001364:	46d9      	mov	r9, fp
 8001366:	eb18 0308 	adds.w	r3, r8, r8
 800136a:	eb49 0409 	adc.w	r4, r9, r9
 800136e:	4698      	mov	r8, r3
 8001370:	46a1      	mov	r9, r4
 8001372:	eb18 080a 	adds.w	r8, r8, sl
 8001376:	eb49 090b 	adc.w	r9, r9, fp
 800137a:	f04f 0100 	mov.w	r1, #0
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001386:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800138a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800138e:	4688      	mov	r8, r1
 8001390:	4691      	mov	r9, r2
 8001392:	eb1a 0508 	adds.w	r5, sl, r8
 8001396:	eb4b 0609 	adc.w	r6, fp, r9
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	4619      	mov	r1, r3
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	f04f 0400 	mov.w	r4, #0
 80013ac:	0094      	lsls	r4, r2, #2
 80013ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80013b2:	008b      	lsls	r3, r1, #2
 80013b4:	461a      	mov	r2, r3
 80013b6:	4623      	mov	r3, r4
 80013b8:	4628      	mov	r0, r5
 80013ba:	4631      	mov	r1, r6
 80013bc:	f7fe ff1c 	bl	80001f8 <__aeabi_uldivmod>
 80013c0:	4603      	mov	r3, r0
 80013c2:	460c      	mov	r4, r1
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b50      	ldr	r3, [pc, #320]	; (8001508 <UART_SetConfig+0x6f4>)
 80013c8:	fba3 2302 	umull	r2, r3, r3, r2
 80013cc:	095b      	lsrs	r3, r3, #5
 80013ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	469b      	mov	fp, r3
 80013d6:	f04f 0c00 	mov.w	ip, #0
 80013da:	46d9      	mov	r9, fp
 80013dc:	46e2      	mov	sl, ip
 80013de:	eb19 0309 	adds.w	r3, r9, r9
 80013e2:	eb4a 040a 	adc.w	r4, sl, sl
 80013e6:	4699      	mov	r9, r3
 80013e8:	46a2      	mov	sl, r4
 80013ea:	eb19 090b 	adds.w	r9, r9, fp
 80013ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80013f2:	f04f 0100 	mov.w	r1, #0
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80013fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001402:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001406:	4689      	mov	r9, r1
 8001408:	4692      	mov	sl, r2
 800140a:	eb1b 0509 	adds.w	r5, fp, r9
 800140e:	eb4c 060a 	adc.w	r6, ip, sl
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4619      	mov	r1, r3
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	f04f 0400 	mov.w	r4, #0
 8001424:	0094      	lsls	r4, r2, #2
 8001426:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800142a:	008b      	lsls	r3, r1, #2
 800142c:	461a      	mov	r2, r3
 800142e:	4623      	mov	r3, r4
 8001430:	4628      	mov	r0, r5
 8001432:	4631      	mov	r1, r6
 8001434:	f7fe fee0 	bl	80001f8 <__aeabi_uldivmod>
 8001438:	4603      	mov	r3, r0
 800143a:	460c      	mov	r4, r1
 800143c:	461a      	mov	r2, r3
 800143e:	4b32      	ldr	r3, [pc, #200]	; (8001508 <UART_SetConfig+0x6f4>)
 8001440:	fba3 1302 	umull	r1, r3, r3, r2
 8001444:	095b      	lsrs	r3, r3, #5
 8001446:	2164      	movs	r1, #100	; 0x64
 8001448:	fb01 f303 	mul.w	r3, r1, r3
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	3332      	adds	r3, #50	; 0x32
 8001452:	4a2d      	ldr	r2, [pc, #180]	; (8001508 <UART_SetConfig+0x6f4>)
 8001454:	fba2 2303 	umull	r2, r3, r2, r3
 8001458:	095b      	lsrs	r3, r3, #5
 800145a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800145e:	4498      	add	r8, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	469b      	mov	fp, r3
 8001464:	f04f 0c00 	mov.w	ip, #0
 8001468:	46d9      	mov	r9, fp
 800146a:	46e2      	mov	sl, ip
 800146c:	eb19 0309 	adds.w	r3, r9, r9
 8001470:	eb4a 040a 	adc.w	r4, sl, sl
 8001474:	4699      	mov	r9, r3
 8001476:	46a2      	mov	sl, r4
 8001478:	eb19 090b 	adds.w	r9, r9, fp
 800147c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001480:	f04f 0100 	mov.w	r1, #0
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800148c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001490:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001494:	4689      	mov	r9, r1
 8001496:	4692      	mov	sl, r2
 8001498:	eb1b 0509 	adds.w	r5, fp, r9
 800149c:	eb4c 060a 	adc.w	r6, ip, sl
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	f04f 0300 	mov.w	r3, #0
 80014ae:	f04f 0400 	mov.w	r4, #0
 80014b2:	0094      	lsls	r4, r2, #2
 80014b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80014b8:	008b      	lsls	r3, r1, #2
 80014ba:	461a      	mov	r2, r3
 80014bc:	4623      	mov	r3, r4
 80014be:	4628      	mov	r0, r5
 80014c0:	4631      	mov	r1, r6
 80014c2:	f7fe fe99 	bl	80001f8 <__aeabi_uldivmod>
 80014c6:	4603      	mov	r3, r0
 80014c8:	460c      	mov	r4, r1
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <UART_SetConfig+0x6f4>)
 80014ce:	fba3 1302 	umull	r1, r3, r3, r2
 80014d2:	095b      	lsrs	r3, r3, #5
 80014d4:	2164      	movs	r1, #100	; 0x64
 80014d6:	fb01 f303 	mul.w	r3, r1, r3
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	3332      	adds	r3, #50	; 0x32
 80014e0:	4a09      	ldr	r2, [pc, #36]	; (8001508 <UART_SetConfig+0x6f4>)
 80014e2:	fba2 2303 	umull	r2, r3, r2, r3
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	f003 020f 	and.w	r2, r3, #15
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4442      	add	r2, r8
 80014f2:	609a      	str	r2, [r3, #8]
}
 80014f4:	e7ff      	b.n	80014f6 <UART_SetConfig+0x6e2>
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001500:	40011000 	.word	0x40011000
 8001504:	40011400 	.word	0x40011400
 8001508:	51eb851f 	.word	0x51eb851f

0800150c <SysTick_Handler>:
/**
 * @fn    :SysTick_Handler()
 * @brief :Contains peripheral functions
 */
void SysTick_Handler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001510:	f7ff f844 	bl	800059c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8001514:	f7ff f973 	bl	80007fe <HAL_SYSTICK_IRQHandler>
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <main>:

//This is the data to be transmitted
char *usrData = "Welcome to Atom Labs....\r\n";

int main(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
	/**
	 * @fn    HAL_Init()
	 * @brief Initialize the HAL, to set NVIC priority, and lower level hardware
	 *        initializations that will be further configure in msp.c
	 */
	HAL_Init();
 8001522:	f7fe ffe9 	bl	80004f8 <HAL_Init>

	UART2_Init();
 8001526:	f000 f819 	bl	800155c <UART2_Init>
	uint16_t dataLen = strlen(usrData);
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <main+0x38>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe fe5a 	bl	80001e8 <strlen>
 8001534:	4603      	mov	r3, r0
 8001536:	80fb      	strh	r3, [r7, #6]
	if(HAL_UART_Transmit(&hUart2, (uint8_t*)usrData, dataLen, HAL_MAX_DELAY)!= HAL_OK)
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <main+0x38>)
 800153a:	6819      	ldr	r1, [r3, #0]
 800153c:	88fa      	ldrh	r2, [r7, #6]
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	4805      	ldr	r0, [pc, #20]	; (8001558 <main+0x3c>)
 8001544:	f7ff fb83 	bl	8000c4e <HAL_UART_Transmit>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <main+0x36>
	{
		ErrorHandler();
 800154e:	f000 f82b 	bl	80015a8 <ErrorHandler>
	}

	while(1);
 8001552:	e7fe      	b.n	8001552 <main+0x36>
 8001554:	20000008 	.word	0x20000008
 8001558:	20000030 	.word	0x20000030

0800155c <UART2_Init>:
/**
 * @fn     UART2_Init(void)
 * @brief  Initialize UART peripheral with the application configuration.
 */
void UART2_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	hUart2.Instance = USART2;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <UART2_Init+0x44>)
 8001562:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <UART2_Init+0x48>)
 8001564:	601a      	str	r2, [r3, #0]
	hUart2.Init.BaudRate = 115200;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <UART2_Init+0x44>)
 8001568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800156c:	605a      	str	r2, [r3, #4]
	hUart2.Init.WordLength = UART_WORDLENGTH_8B;
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <UART2_Init+0x44>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
	hUart2.Init.StopBits = UART_STOPBITS_1;
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <UART2_Init+0x44>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
	hUart2.Init.Parity = UART_PARITY_NONE;
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <UART2_Init+0x44>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
	hUart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <UART2_Init+0x44>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
	hUart2.Init.Mode = UART_MODE_TX_RX;
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <UART2_Init+0x44>)
 8001588:	220c      	movs	r2, #12
 800158a:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&hUart2) != HAL_OK)
 800158c:	4804      	ldr	r0, [pc, #16]	; (80015a0 <UART2_Init+0x44>)
 800158e:	f7ff fb11 	bl	8000bb4 <HAL_UART_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <UART2_Init+0x40>
	{
		ErrorHandler();
 8001598:	f000 f806 	bl	80015a8 <ErrorHandler>
	}
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000030 	.word	0x20000030
 80015a4:	40004400 	.word	0x40004400

080015a8 <ErrorHandler>:
/**
 * @fn    ErrorHandler()
 * @brief In case, we hit an error..
 */
void ErrorHandler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
	while(1);
 80015ac:	e7fe      	b.n	80015ac <ErrorHandler+0x4>
	...

080015b0 <HAL_MspInit>:
 */

#include "main.h"

void HAL_MspInit(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
   * @brief Here we will lower level initializations
   *        1) Setup priority grouping of the arm cortex mx processor
   *        2) Enable the required system exceptions of ARM cortex MX processor.
   *        3) Configure the priority for system exception.
   */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b4:	2003      	movs	r0, #3
 80015b6:	f7ff f8e1 	bl	800077c <HAL_NVIC_SetPriorityGrouping>

	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <HAL_MspInit+0x40>)
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <HAL_MspInit+0x40>)
 80015c0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80015c4:	6253      	str	r3, [r2, #36]	; 0x24

	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	f06f 000b 	mvn.w	r0, #11
 80015ce:	f7ff f8e0 	bl	8000792 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	f06f 000a 	mvn.w	r0, #10
 80015da:	f7ff f8da 	bl	8000792 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	f06f 0009 	mvn.w	r0, #9
 80015e6:	f7ff f8d4 	bl	8000792 <HAL_NVIC_SetPriority>
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	 *        3) Enable the IRQ and setup the priority (NVIC settings)
	 */

	GPIO_InitTypeDef gpioUART;

	__HAL_RCC_USART2_CLK_ENABLE();
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	4b1e      	ldr	r3, [pc, #120]	; (800167c <HAL_UART_MspInit+0x88>)
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	4a1d      	ldr	r2, [pc, #116]	; (800167c <HAL_UART_MspInit+0x88>)
 8001606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160a:	6413      	str	r3, [r2, #64]	; 0x40
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <HAL_UART_MspInit+0x88>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <HAL_UART_MspInit+0x88>)
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	4a16      	ldr	r2, [pc, #88]	; (800167c <HAL_UART_MspInit+0x88>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6313      	str	r3, [r2, #48]	; 0x30
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <HAL_UART_MspInit+0x88>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]

	gpioUART.Pin = GPIO_PIN_2;//UART2_TX
 8001634:	2304      	movs	r3, #4
 8001636:	617b      	str	r3, [r7, #20]
	gpioUART.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	61bb      	str	r3, [r7, #24]
	gpioUART.Pull = GPIO_PULLUP;
 800163c:	2301      	movs	r3, #1
 800163e:	61fb      	str	r3, [r7, #28]
	gpioUART.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
	gpioUART.Alternate = GPIO_AF7_USART2;
 8001644:	2307      	movs	r3, #7
 8001646:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOA, &gpioUART);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	480c      	ldr	r0, [pc, #48]	; (8001680 <HAL_UART_MspInit+0x8c>)
 8001650:	f7ff f8e2 	bl	8000818 <HAL_GPIO_Init>

	gpioUART.Pin = GPIO_PIN_3;//UART2_RX
 8001654:	2308      	movs	r3, #8
 8001656:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpioUART);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	4808      	ldr	r0, [pc, #32]	; (8001680 <HAL_UART_MspInit+0x8c>)
 8001660:	f7ff f8da 	bl	8000818 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001664:	2026      	movs	r0, #38	; 0x26
 8001666:	f7ff f8b0 	bl	80007ca <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	210f      	movs	r1, #15
 800166e:	2026      	movs	r0, #38	; 0x26
 8001670:	f7ff f88f 	bl	8000792 <HAL_NVIC_SetPriority>
}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40023800 	.word	0x40023800
 8001680:	40020000 	.word	0x40020000

08001684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <SystemInit+0x60>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168e:	4a15      	ldr	r2, [pc, #84]	; (80016e4 <SystemInit+0x60>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <SystemInit+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <SystemInit+0x64>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016a4:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <SystemInit+0x64>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <SystemInit+0x64>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <SystemInit+0x64>)
 80016b0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80016b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <SystemInit+0x64>)
 80016bc:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <SystemInit+0x68>)
 80016be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <SystemInit+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <SystemInit+0x64>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <SystemInit+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <SystemInit+0x60>)
 80016d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016d8:	609a      	str	r2, [r3, #8]
#endif
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00
 80016e8:	40023800 	.word	0x40023800
 80016ec:	24003010 	.word	0x24003010

080016f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016f0:	480d      	ldr	r0, [pc, #52]	; (8001728 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f4:	480d      	ldr	r0, [pc, #52]	; (800172c <LoopForever+0x6>)
  ldr r1, =_edata
 80016f6:	490e      	ldr	r1, [pc, #56]	; (8001730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016f8:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <LoopForever+0xe>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016fc:	e002      	b.n	8001704 <LoopCopyDataInit>

080016fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001702:	3304      	adds	r3, #4

08001704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001708:	d3f9      	bcc.n	80016fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170a:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <LoopForever+0x12>)
  ldr r4, =_ebss
 800170c:	4c0b      	ldr	r4, [pc, #44]	; (800173c <LoopForever+0x16>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001710:	e001      	b.n	8001716 <LoopFillZerobss>

08001712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001714:	3204      	adds	r2, #4

08001716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001718:	d3fb      	bcc.n	8001712 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800171a:	f7ff ffb3 	bl	8001684 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800171e:	f000 f811 	bl	8001744 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001722:	f7ff fefb 	bl	800151c <main>

08001726 <LoopForever>:

LoopForever:
    b LoopForever
 8001726:	e7fe      	b.n	8001726 <LoopForever>
  ldr   r0, =_estack
 8001728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800172c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001730:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001734:	080017d8 	.word	0x080017d8
  ldr r2, =_sbss
 8001738:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800173c:	20000070 	.word	0x20000070

08001740 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC_IRQHandler>
	...

08001744 <__libc_init_array>:
 8001744:	b570      	push	{r4, r5, r6, lr}
 8001746:	4e0d      	ldr	r6, [pc, #52]	; (800177c <__libc_init_array+0x38>)
 8001748:	4c0d      	ldr	r4, [pc, #52]	; (8001780 <__libc_init_array+0x3c>)
 800174a:	1ba4      	subs	r4, r4, r6
 800174c:	10a4      	asrs	r4, r4, #2
 800174e:	2500      	movs	r5, #0
 8001750:	42a5      	cmp	r5, r4
 8001752:	d109      	bne.n	8001768 <__libc_init_array+0x24>
 8001754:	4e0b      	ldr	r6, [pc, #44]	; (8001784 <__libc_init_array+0x40>)
 8001756:	4c0c      	ldr	r4, [pc, #48]	; (8001788 <__libc_init_array+0x44>)
 8001758:	f000 f818 	bl	800178c <_init>
 800175c:	1ba4      	subs	r4, r4, r6
 800175e:	10a4      	asrs	r4, r4, #2
 8001760:	2500      	movs	r5, #0
 8001762:	42a5      	cmp	r5, r4
 8001764:	d105      	bne.n	8001772 <__libc_init_array+0x2e>
 8001766:	bd70      	pop	{r4, r5, r6, pc}
 8001768:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800176c:	4798      	blx	r3
 800176e:	3501      	adds	r5, #1
 8001770:	e7ee      	b.n	8001750 <__libc_init_array+0xc>
 8001772:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001776:	4798      	blx	r3
 8001778:	3501      	adds	r5, #1
 800177a:	e7f2      	b.n	8001762 <__libc_init_array+0x1e>
 800177c:	080017d0 	.word	0x080017d0
 8001780:	080017d0 	.word	0x080017d0
 8001784:	080017d0 	.word	0x080017d0
 8001788:	080017d4 	.word	0x080017d4

0800178c <_init>:
 800178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800178e:	bf00      	nop
 8001790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001792:	bc08      	pop	{r3}
 8001794:	469e      	mov	lr, r3
 8001796:	4770      	bx	lr

08001798 <_fini>:
 8001798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800179a:	bf00      	nop
 800179c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800179e:	bc08      	pop	{r3}
 80017a0:	469e      	mov	lr, r3
 80017a2:	4770      	bx	lr
